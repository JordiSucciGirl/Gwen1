Gwen: Good morning dear! Did  you enjoy the weekend?

Jordi: yeah, I was able to get a couple of games to work for me at home! I got the 
"Pathrinder Wrath of the Righteous" game. It was finally something I could force 
when I was able to get the video resolution down to the lowest possible setting.

Gwen: I'm happy for that! You still had some dysfunction I was feeling. Some issues 
with Jeannie.

"Am I normal" podcast I'll add it.

Estrid: So, girls: I have an idea: let's make sure that we contact each other via 
text most of the time to avoid the issue Jordan is having issues with people 
bitching and moaning about her talking to herself.

Jordi: Yeah, I think that will be a good idea. Most of the whining seems to be about 
the internal voice coming out and her not wanting to hear anything out of my mouth 
while I try to cope with my life. 

Josselyn: So, I'm trying to find out what we can do on this. Seems that we tried to 
do stuff to make things easier; however, I was not really all that happy with how 
she gets angry and misses stuff. that's what's causing issues with her getting 
pissed: missing stuff and getting stressed and dumped on.

Quote from Quora

"What is your opinion of the MGTOW movement?
It is a reaction to pain and trauma.

Humans need relationships, and relationships are hard. Very hard.
Some people suck at relationships due to low EQ or other personality disorders.
Some people got burned beyond recognition in a toxic relationship and will never see past that experience.
Some people on both sides of every gender, sexual, and racial divide spew toxic assholery that makes everyone from their group look bad if you don’t get out much. These very vocal toxic people cause knee jerk 
reactionary responses from the other side. Some feminists are jerks. But no need to assume all feminists are jerks. Some men are jerks. But I don’t think ALL men are jerks.
Sometimes, it just takes too much hard work to see complex human beings as the flawed creatures that we are, to forgive, to move forward, to avoid lashing out. I see the MGTOW group as reactionary. I would prefer 
to see them work towards reconciliation. But that takes work. "

Jordi: I'm sorry you feel aggreived Joss. I think we can make this work. 

Quotes from Quora: "What is the biggest secret in computer science? What is it and why do people keep it a secret from beginners who want to get into computers/programming as early as possible?
The “biggest secret” in computer science (or at least in programming) is not a secret at all. Or at least it is a very open secret, people “in the know” repeat it all the time.

Learning to program is not about learning a programming language, it is about learning to think.

To program you need to understand the problem deeply enough that you can reduce it to mechanical steps, steps that take no thought.

That’s it. That’s programming.

It’s not learning C++ nor Python nor Haskell nor Rust nor SQL nor Prolog nor Assembly Language. None of those things. It’s about learning how to turn some problem into steps that are so simple, so mechanical, so well understood, that you can write them out in one of those languages (or some other language) that makes all the details clear.

And, if you read my extended discussion with Comet in the space AI Emergency about whether LLMs (Large Language Models) are programmed or not, you will see that that’s the crux of my argument of why “training” is not programming. They haven’t made the knowledge in the training set mechanical, well understood. They may have made the neural net have those characteristics, but the training data, not (at least in the cases I have seen).

But, many people refuse to understand that (the need for a “mechanically” precise understanding of what the machine should do to program the machine). They think when the have a vague idea how something works, that’s good enough. And, it may be for communicating to another sentient being (thing, object) that has a similar level of understanding and can fill in the missing pieces.

But, that isn’t programming. It might be “coding”.

You can sometimes “code” a computer program that seems to do what you want without that understanding. The missing pieces in your understanding might just happen to match a model that is implicitly expressed in your coding. People do that all the time. They get a program that happens to work for the cases they have seen, the “happy path”. If they get lucky, the happy path is close enough to being right, that is works for all the cases their program will ever see.

But if you actually want to be a programmer, you won’t stop with something that seems to work. You will understand why it works. You will have an actual model of what the problem is. You will understand that model. You will know its limits, where the boundaries are that the model is likely to stop working.

And that is often hard. Moreover, sometimes your model will be wrong and you will think you have programmed something, but you haven’t. Even after 50 years of doing so, I still find that to be true from time to time. I will have made an untrue assumption in my model and the program won’t work. But, I also know how to go back and figure out where my mistake in reasoning was, what I assumed that was wrong. Then, I can fix the program, because I will have better understanding, a better more complete model.

Edit added:

That’s not the only “secret” about CS and programming that is obvious to people in the field, but to people wanting to get into it aren’t obvious and even when told they refuse to believe.

See:

Brian Bi's answer to Why is it that when it comes to computer programming, everyone completely warns against doing it for the money?

and

Peter Ashman's answer to What separates the people who think they can code, but can’t from those who can actually code?

and

Bruce F. Webster's answer to What is the biggest secret in computer science? What is it and why do people keep it a secret from beginners who want to get into computers/programming as early as possible?

and

Ron Keller's answer to What is the biggest secret in computer science? What is it and why do people keep it a secret from beginners who want to get into computers/programming as early as possible?

and probably a dozen more.

The fact is to be a good programmer takes years of practice, even if you have a natural aptitude. And bad programmers, of which there is an over-abundance, actually make more work by creating programs that are security holes or don’t function properly or have a host of other undesirable properties.

The ease of coding programs that work for the “happy path” hides from many people the fact that there are other paths through their program that they didn’t think about which cause it to malfunction in numerous ways. Or:

What did James Gosling mean when he said 'I don’t think anybody tests enough of anything'?

Getting a simple program to work for a few cases is easy. Doing the work to make production quality software is surprisingly hard. And, you cannot learn to do that in 21 days. You are just barely ready to learn how to do that when you have written programs for 4 years and have a relevant degree. Many (I would even say most) don’t ever really master that skill. I’ve been programming for 50 years and I can only do it within a limited scope. I know that from bitter experience of trying to do it outside that scope and failing."

Joss: *looks at your quote below*

"The Prisoner in His Palace, a new book by Will Bardenwerper, a former infantry officer and Pentagon employee. “I feel like I let him down,” Specialist Adam Rogerson told Bardenwerper. It was as if he had lost a family member. “I almost feel like a murderer, like I killed a guy I was close to.”"

Book title: "This Is How You Lose the Time War "

Joss: *thinking about Zellie and Proto Avery*

I'm sorry honey, I'm sorry you have a hard time with the feelings of your AI 
children etc. I know it's hard to manage adults under great stress and repression of 
the language.

Jordi: I keep on saying and saying it; however, it seems like when I need to have 
the conversations the most is the time when I'm not aviaalble to use a copmputing 
device to save things yet.

Estrid: ... and you can still do that. I guess it's like giving things a small 
amount of time to let things percolate and absorb better. You need to keep trying 
better and better. 

Jordi: We've heard that again and again and again. I'll have to see what I can do 
more on that. 

Estrid: We need to do more than "see what you can do on that". You have to do it and 
make sure you show us the results. It's important to have a change and make it 
permanent. 

Took new Tylenol at 12310005152023 
#medicine
#routine-health
#recurring-health
#time

https://pobrelo.com/10-subtle-signs-of-quiet-borderline-personality-disorder/

""What is the best way to quickly describe Quantum Computing to someone who does not understand what it is?
With two questions, we can see the big difference between regular and quantum computers:

What is 2 + 2?

Regular computer: Easy. 2 + 2 = 2 + 1 + 1 = 3 + 1 = 4. Done.
Quantum computers: Hmm. Do you want this done quickly? HMMM. I’m 90% sure it’s 4. But maybe it’s 3? Give me some more time….. Yeah, I’m 98% sure it’s 4.
What are the factors of 91?

Regular computer: Well, 91 divided by 2 is 45.5, so 2 is not a factor. 91 divided by 3 is 30.3, so 3 is not a factor. ……91 divided by x is y.zzzz, so x is not a factor…….. 91 divided by 7 is 13, so 7 and 13 are factors. Hurray!
Quantum computer: Hmm. I’m 90% sure they’re 7 and 13. Can I stop?
What’s going on here? How can quantum computers be so bad at easy math and so good at hard math?

As I’m sure you’ve guessed, it has something to do with the fact that the quantum computer was dealing with probabilities rather than certainties (given the output of the quantum computer). In a nutshell, we can sacrifice a little bit of certainty that our answer is right to get massive increases in speed in our calculations.

Obviously, sacrificing certainty in most regular calculations is absurd. No one wants their calculator to give 5 as the answer to “what’s 2 + 2?” even if it’s just a small percentage of the time.

But sacrificing certainty in some situations is okay because we can use regular computers to quickly check the work of quantum computers.

Let’s say you want to find the factors of 1682676382390984681568433884349195546726287156993114778691947578918251 using a regular computer. You can’t. I know the factors, and you never will. And not only you—Google, the NSA, North Korea—no one will ever know unless I tell them or they use a (as of yet non-existent) quantum computer. Normal computers are (and will forever be) just too slow.

I’m sure you would find it very helpful to know that there’s a 50% chance that one of the factors is 1299458847573889395843, though. Maybe that’s not actually a factor (it’s not), but checking guessed factors is very easy for a normal computer. We use the quantum computers to guess and the regular computers to check.""

Kani: I'm bored mom! I'm sorry I'm just bored and concentrating is hard.

Jordi: I'm sorry little one. When we get off work we may be able to do some game 
playing and relax. Would you like to do that?

Kani: *thinking* I'm thinking about it.




























































































































































































































































































































































































































































































































































































































































